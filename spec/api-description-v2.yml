swagger: '2.0'

info:
  version: 1.0.0
  title: Example API Doc
  x-logo:
    url: './api-doc-logo.png'
  description: >
    # Overview

    The **API Doc Example** is RESTful API. The requests and responses are formated
    according to the [JSON API](http://jsonapi.org/format/1.0/) specification.

    # Authentication

    Authentication for the API Doc Example is based on the [OAuth 2.0 Authorization
    Framework](https://tools.ietf.org/html/rfc6749). Twine currently supports
    grant types of **client_credentials** and **refresh_token**.

    # Paging

    Skip-based paging uses the query parameters `page[size]` and `page[number]`
    to specify the max number of resources returned and the page number. We
    default to skip-based paging if there are no page parameters. The response
    will include a `links` object containing links to the first, last, prev, and
    next pages of data.


    If the contents of the collection change while you are iterating through the
    collection, you will see duplicate or missing documents. For example, if you
    are iterating through the `calender_event` resource via `GET
    /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new
    `calendar_event` is created that has a `start_at` value before the first
    `calendar_event`, when you fetch the next page at `GET
    /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first
    entry in the second response will be a duplicate of the last entry in the
    first response.

host: 'education.test.evercheck.com'

paths:
  /professions:
    get:
      summary: List of Professions
      description: Get a list of professions matching the specified filters.
      operationId: getProfessions
      tags:
        - Professions
      responses:
        200:
          description: A list of professions
          schema:
            $ref: '#/definitions/Professions'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    post:
      summary: Create profession
      description: Adds a new profession to the list
      tags:
        - Professions
      parameters:
        - name: 'profession'
          in: 'body'
          required: true
          description: The profession
          schema:
            $ref: '#/definitions/Profession'
      responses:
        200:
          description: Profession successfully created
          schema:
            $ref: '#/definitions/Profession'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

  /professions/{id}:
    parameters:
      - $ref: '#/parameters/id'

    get:
      summary: Get profession
      description: Returns a single profession from its id
      tags:
        - Professions
      responses:
        200:
          description: A profession
          schema:
            $ref: '#/definitions/Profession'
        404:
          $ref: '#/responses/ProfessionDoesNotExistResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    delete:
      summary: Delete profession
      description: Deletes a single profession from its id
      tags:
        - Professions
      responses:
        204:
          description: Profession successfully deleted
        500:
          $ref: '#/responses/Standard500ErrorResponse'

    patch:
      summary: Update profession
      description: Update a single profession from its id
      tags:
        - Professions
      parameters:
        - name: 'profession'
          in: 'body'
          required: true
          description: The profession
          schema:
            $ref: '#/definitions/Profession'
      responses:
        200:
          description: Profession successfully updated
        404:
          $ref: '#/responses/ProfessionDoesNotExistResponse'
        500:
          $ref: '#/responses/Standard500ErrorResponse'

definitions:
  Profession:
    type: object
    required:
      - id
      - name
      - state
    properties:
      id:
        type: integer
        readOnly: true
      name:
        type: string
      state:
        type: string

  Professions:
    type: array
    items:
      $ref: '#/definitions/Profession'

  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string

responses:
  Standard500ErrorResponse:
    description: An unexpected error occured
    schema:
      $ref: '#/definitions/Error'

  ProfessionDoesNotExistResponse:
    description: Profession does not exist

parameters:
  id:
    name: id
    in: path
    required: true
    description: The profession id
    type: integer
    enum: [1, 2, 3, 4, 5, 6, 7, 8, 9]
